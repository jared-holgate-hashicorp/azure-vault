packer {
  required_version = ">= 0.12.0"
}

variable "azure_location" {
  type = string
}

variable "ca_public_key_path" {
  type = string
}

variable "client_id" {
  type    = string
  default = "${env("ARM_CLIENT_ID")}"
}

variable "client_secret" {
  type    = string
  default = "${env("ARM_CLIENT_SECRET")}"
}

variable "consul_module_version" {
  type    = string
  default = "v0.0.5"
}

variable "consul_version" {
  type    = string
  default = "1.10.1"
}

variable "github_oauth_token" {
  type    = string
  default = "${env("GITHUB_OAUTH_TOKEN")}"
}

variable "resource_group_name" {
  type = string
}

variable "subscription_id" {
  type    = string
  default = "${env("ARM_SUBSCRIPTION_ID")}"
}

variable "tenant_id" {
  type    = string
  default = "${env("ARM_TENANT_ID")}"
}

variable "tls_private_key_path" {
  type = string
}

variable "tls_public_key_path" {
  type = string
}

variable "vault_module_version" {
  type    = string
  default = "v0.0.2"
}

variable "vault_version" {
  type    = string
  default = "1.7.3"
}
# The "legacy_isotime" function has been provided for backwards compatability, but we recommend switching to the timestamp and formatdate functions.

source "azure-arm" "autogenerated_1" {
  client_id                         = "${var.client_id}"
  client_secret                     = "${var.client_secret}"
  image_offer                       = "UbuntuServer"
  image_publisher                   = "Canonical"
  image_sku                         = "16.04.0-LTS"
  location                          = "${var.azure_location}"
  managed_image_name                = "vault-consul-ubuntu-${legacy_isotime("2006-01-02-150405")}"
  managed_image_resource_group_name = "${var.resource_group_name}"
  os_type                           = "Linux"
  subscription_id                   = "${var.subscription_id}"
  tenant_id                         = "${var.tenant_id}"
  vm_size                           = "Standard_DS2_v2"
}

build {
  sources = ["source.azure-arm.autogenerated_1"]

  provisioner "file" {
    destination = "/tmp/ca.crt.pem"
    source      = "${var.ca_public_key_path}"
  }

  provisioner "file" {
    destination = "/tmp/vault.crt.pem"
    source      = "${var.tls_public_key_path}"
  }

  provisioner "file" {
    destination = "/tmp/vault.key.pem"
    source      = "${var.tls_private_key_path}"
  }

  provisioner "shell" {
    execute_command = "chmod +x {{ .Path }}; {{ .Vars }} sudo -E sh '{{ .Path }}'"
    inline          = [ 
      "DEBIAN_FRONTEND=noninteractive apt-get -y upgrade", 
      "echo \"deb https://packages.microsoft.com/repos/azure-cli/ wheezy main\" | sudo tee /etc/apt/sources.list.d/azure-cli.list", 
      "apt-key adv --keyserver packages.microsoft.com --recv-keys 417A0893", 
      "apt-get update && apt-get install -y git libssl-dev libffi-dev python-dev build-essential apt-transport-https azure-cli", 
      "git clone --branch ${var.vault_module_version} https://${var.github_oauth_token}@github.com/hashicorp/terraform-azurerm-vault.git /tmp/terraform-vault-azure", 
      "/tmp/terraform-vault-azure/modules/install-vault/install-vault --version ${var.vault_version}", 
      "git clone --branch ${var.consul_module_version} https://${var.github_oauth_token}@github.com/hashicorp/terraform-azurerm-consul.git /tmp/terraform-consul-azure", 
      "/tmp/terraform-consul-azure/modules/install-consul/install-consul --version ${var.consul_version}", "/tmp/terraform-consul-azure/modules/install-dnsmasq/install-dnsmasq"
    ]
    inline_shebang  = "/bin/sh -x"
  }

  provisioner "shell" {
    execute_command = "chmod +x {{ .Path }}; {{ .Vars }} sudo -E sh '{{ .Path }}'"
    inline          = ["mv /tmp/ca.crt.pem /opt/vault/tls/", "mv /tmp/vault.crt.pem /opt/vault/tls/", "mv /tmp/vault.key.pem /opt/vault/tls/", "chown vault:vault /opt/vault/tls/*", "chmod 600 /opt/vault/tls/*", "/tmp/terraform-vault-azure/modules/update-certificate-store/update-certificate-store --cert-file-path /opt/vault/tls/ca.crt.pem"]
    inline_shebang  = "/bin/sh -x"
  }

  provisioner "shell" {
    execute_command = "chmod +x {{ .Path }}; {{ .Vars }} sudo -E sh '{{ .Path }}'"
    inline          = ["/usr/sbin/waagent -force -deprovision+user && export HISTSIZE=0 && sync"]
    inline_shebang  = "/bin/sh -x"
  }

}
